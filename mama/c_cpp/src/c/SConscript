#!/usr/bin/python
# -*- coding: utf-8 -*-
import os
Import('*')
env = env.Clone()

releaseString = env['versions']['mama']['releaseString']

InstMamaInclude = \
    Split("""
	mama/clientmanage.h 
	mama/config.h 
	mama/datetime.h 
	mama/dictionary.h 
	mama/entitlement.h
    mama/error.h 
	mama/fielddesc.h 
	mama/inbox.h 
	mama/io.h 
	mama/log.h 
	mama/mama.h 
	mama/mamautils.h 
	mama/marketdata.h 
    mama/middleware.h 
	mama/msg.h 
	mama/msgfield.h 
	mama/msgqualifier.h 
	mama/msgstatus.h 
	mama/msgtype.h 
	mama/price.h 
	mama/publisher.h 
    mama/dqpublisher.h 
    mama/dqpublishermanager.h 
	mama/quality.h 
	mama/queue.h 
	mama/reservedfields.h 
	mama/senderId.h 
	mama/servicelevel.h 
	mama/source.h 
	mama/sourceman.h 
	mama/stat.h 
	mama/statscollector.h 
	mama/statfields.h 
	mama/status.h 
	mama/subscmsgtype.h 
	mama/subscription.h 
	mama/subscriptiontype.h 
	mama/symbollist.h 
	mama/ft.h 
	mama/symbollistmember.h 
	mama/symbollisttypes.h 
    mama/symbolmap.h 
	mama/symbolmapfile.h 
	mama/timer.h 
	mama/timezone.h 
	mama/transport.h 
	mama/types.h 
	mama/version.h
""")

InstConflInclude = Split("""
    mama/conflation/connection.h 
""")

InstFieldCacheInclude = Split("""
    mama/fieldcache/fieldcache.h
    mama/fieldcache/fieldcachefield.h
    mama/fieldcache/fieldcacheiterator.h
    mama/fieldcache/fieldcacherecord.h
    mama/fieldcache/fieldcachetypes.h
""")

includePath = []
includePath.append('#mama/c_cpp/src/c')
includePath.append('$prefix/include')
includePath.append('#common/c_cpp/src/c')

libPath = []
libPath.append('$libdir')

if env['host']['os'] == 'Darwin':
    env.Append(LIBS=['m', 'wombatcommon', 'dl', 'pthread'],
               LIBPATH=libPath, CPPPATH=[includePath])
else:
    env.Append(LIBS=['m', 'rt', 'wombatcommon', 'dl', 'pthread'],
               LIBPATH=libPath, CPPPATH=[includePath])

libmama_sources = \
    Split("""
    bridge.c
	clientmanageresponder.c
    datetime.c
	dictionary.c
	dqstrategy.c
    error.c
    entitlement.c
    entitlementlibraries.c
	fielddesc.c
	imagerequest.c
	listenermsgcallback.c
	log.c
    mama.c
    mamautils.c
    mamaStrUtils.c
	marketdata.c
    plugin.c
    middleware.c
	msg.c
	msgfield.c
	msgqualifier.c
	msgstatus.c
	msgtype.c
	msgutils.c
    publisher.c
    dqpublisher.c
    dqpublishermanager.c
    inbox.c
	quality.c
	registerfunctions.c
	reservedfields.c
	senderId.c
	servicelevel.c
    queue.c
    io.c
    price.c
    priceimpl.c
    refreshtransport.c
    timer.c
    timezone.c
	source.c
	sourceman.c
    status.c
	stat.c
	statscollector.c
	statfields.c
	statsgenerator.c
	subscmsgtype.c
	subscription.c
	subscriptiontype.c
	statslogger.c
	statsloggerfields.c
	symbollist.c
	ft.c
    version.c
	symbollistmember.c
	symbolmapfile.c
	syncresponder.c
	throttle.c
	transport.c
    fileutils.c
    playback/playbackFileParser.c
    playback/playbackpublisher.c
    playback/playbackcapture.c
    conflation/connection.c
    conflation/serverconnection.c
    conflation/manager.c
    fieldcache/fieldcache.c
    fieldcache/fieldcachefieldimpl.c
    fieldcache/fieldcacheiterator.c
    fieldcache/fieldcachemaparray.c
    fieldcache/fieldcachemap.c
    fieldcache/fieldcacherecord.c
    fieldcache/fieldcachefield.c
    fieldcache/fieldcacheimpl.c
    fieldcache/fieldcachelist.c
    fieldcache/fieldcachevector.c
""")


"""
Populate mama/c_cpp/src/c/entitlementlibraries.c with array of libraries to be made
mamdatory to load at runtime.
"""
entitlementLibsFile = os.path.join(Dir('#').abspath,'mama/c_cpp/src/c/entitlementlibraries.c')
fp = open(entitlementLibsFile, 'w')
fp.write("#include <mamainternal.h>\n")
if len(env['entitlements']) > 0:
    libstr = "const char* gEntitlementBridges [MAX_ENTITLEMENT_BRIDGES] = {{\"{0}\"".format(env['entitlements'][0])
    if len(env['entitlements']) > 1:
        for lib in env['entitlements'][1:]:
            libstr = "{0},\"{1}\"".format(libstr,lib)
    libstr += ',NULL};\n'
    fp.write(libstr)
else:
    fp.write("const char* gEntitlementBridges [MAX_ENTITLEMENT_BRIDGES] = {0};\n");

fp.close()

static_objects = []
shared_objects = []
StaticLibs['libmama'] = []


for s in libmama_sources:
    if s == "msg.c":
        # Our deprecated warnings don't work for msg.c in GCC versions before
        # 4.6 so turning off deprecated warnings for this particular file
        static_obj = env.Object(s, CFLAGS=(["-Wno-deprecated-declarations"] + env['CFLAGS']))
        shared_obj = env.SharedObject(s, CFLAGS=(["-Wno-deprecated-declarations"] + env['CFLAGS']))
    else:
        static_obj = env.Object(s)
        shared_obj = env.SharedObject(s)

    StaticLibs['libmama'].append(static_obj)
    static_objects.append(static_obj)
    shared_objects.append(shared_obj)

lib = []
lib.append(env.SharedLibrary('.libs/libmama', shared_objects))
lib.append(env.StaticLibrary('.libs/libmama', [StaticLibs['libmama'], StaticLibs['libwombatcommon'] ]))

Alias('install', env.Install('$libdir', lib))
Alias('install', env.Install('$prefix/include/mama', InstMamaInclude))
Alias('install', env.Install('$prefix/include/mama/conflation',
      InstConflInclude))
Alias('install', env.Install('$prefix/include/mama/fieldcache',
      InstFieldCacheInclude))

env.SConscript('bridge/SConscript', 'env')
env.SConscript('payload/SConscript', 'env')
env.SConscript('entitlement/SConscript', 'env')

Clean(lib, 'version.c')
